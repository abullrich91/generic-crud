version: '3'
services:
  docker-mysql:
    image: mysql:5.7.6
    environment:
      MYSQL_ROOT_PASSWORD: abullrich
      MYSQL_DATABASE: abullrichdb
      MYSQL_USER: root
      MYSQL_PASSWORD: abullrich
    healthcheck:
      test: "/usr/bin/mysql --user=root --password=abullrich --execute \"SHOW DATABASES;\""
      interval: 2s
      timeout: 20s
      retries: 10
    ports:
      - 5306:3306
    volumes:
      - mysql-data:/var/lib/mysql
    container_name: docker-mysql

  generic-crud-app:
    restart: on-failure
    build: ./
    expose:
      - "8080"
    ports:
      - 6080:8080
    environment:
      - MYSQL_SERVER=docker-mysql
    depends_on:
      - docker-mysql

volumes:
  mysql-data:


#version: '3'
#services:
#  docker-mysql:
#    restart: always
#    container_name: docker-mysql
#    image: mysql
#    environment:
#      MYSQL_DATABASE: abullrichdb
#      MYSQL_ROOT_PASSWORD: abullrichdb
#      MYSQL_ROOT_HOST: '%'
#    volumes:
#      - ./sql:/docker-entrypoint-initdb.d
#    ports:
#      - "5306:3306"
#    healthcheck:
#      test: "/usr/bin/mysql --user=root --password=abullrichdb--execute \"SHOW DATABASES;\""
#      interval: 2s
#      timeout: 20s
#      retries: 10
#
#  generic-crud-app:
#    restart: on-failure
#    build: ./
#    expose:
#      - "8080"
#    ports:
#      - 6080:8080
#    environment:
#      WAIT_HOSTS: mysql:3306
#    depends_on:
#      - docker-mysql

## Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)
#
#version: '3.7'
#
## Define services
#services:
#  # App backend service
#  app-server:
#    # Configuration for building the docker image for the backend service
#    build:
#      context: ./ # Use an image built from the specified dockerfile in the `generic-crud-app-server` directory.
#      dockerfile: Dockerfile
#    ports:
#      - "6080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
#    restart: always
#    depends_on:
#      - mysql_db # This service depends on mysql. Start that first.
##    environment: # Pass environment variables to the service
##      SPRING_DATASOURCE_URL: jdbc:mysql://mysql_db:3306/polls?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
##      SPRING_DATASOURCE_USERNAME: callicoder
##      SPRING_DATASOURCE_PASSWORD: callicoder
#    networks: # Networks to join (Services on the same network can communicate with each other using their name)
#      - backend
#
#  # Database Service (Mysql)
#  mysql_db:
#    image: mysql:latest
#    ports:
#      - "5306:3306"
#    restart: always
#    environment:
#      MYSQL_DATABASE: abullrichdb
#      MYSQL_USER: root
#      MYSQL_PASSWORD: abullrichdb
#      MYSQL_ROOT_PASSWORD: abullrichdb
#    volumes:
#      - mysql_db-data:/var/lib/mysql
#    networks:
#      - backend
#
## Volumes
#volumes:
#  mysql_db-data:
#
## Networks to be created to facilitate communication between containers
#networks:
#  backend:
#  frontend: